<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Brent Benson</title>
<link>https://brentwbenson.org/</link>
<atom:link href="https://brentwbenson.org/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Thu, 04 Jul 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>Unlocking Middle Earth</title>
  <dc:creator>Brent Benson</dc:creator>
  <link>https://brentwbenson.org/posts/lord-of-the-rings/</link>
  <description><![CDATA[ 





<p>New generative AI technologies can be useful for delving into detailed, world-building stories like Tolkien’s <em>The Lord of the Rings</em>.</p>
<p>First, a few examples of some questions and responses.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://brentwbenson.org/posts/lord-of-the-rings/lotr_q_and_a.png" class="img-fluid figure-img"></p>
<figcaption>First example of a question and answer from the RAG-based chatbot. “Who is Aragorn?”</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://brentwbenson.org/posts/lord-of-the-rings/lotr_q_and_a_2.png" class="img-fluid figure-img"></p>
<figcaption>Second example of a question and answer from the RAG-based chatbot. “How did Aragorn come to know Elrond?”</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://brentwbenson.org/posts/lord-of-the-rings/lotr_q_and_a_3.png" class="img-fluid figure-img"></p>
<figcaption>Third example of a question and answer from the RAG-based chatbot. “What are the Silmarils?”</figcaption>
</figure>
</div>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Readers of J.R.R. Tolkien’s books and watchers of the movie adaptations develop varying levels of understanding of the complex characters, geography, and lore of Middle Earth. Some dive in, head first, poring over the driest sections of <em>The Silmarillion</em> and other related texts and writings, while others enjoy the stories in a more transactional context, understanding only what is needed to follow the story.</p>
<p>For those looking for a more in-depth experience a discussion with a well-versed Tolkien expert or reading along with others in a book club can be an avenue towards deeper understanding and enjoyment. But we don’t always have someone around that fits the bill as a discussion partner.</p>
<p>My son has recently started delving into <em>The Lord of the Rings</em> again and it gave me the idea of using Generative AI as a tool for enhancing the Tolkien experience.</p>
<p>This is an example of a question I asked after indexing the textual content of <em>The Lord of the Rings</em> books and making them available through a custom conversational retrieval chatbot using Retrieval-Augmented Generation.</p>
</section>
<section id="retrieval-augmented-generation" class="level2">
<h2 class="anchored" data-anchor-id="retrieval-augmented-generation">Retrieval-Augmented Generation</h2>
<p>I am a big fan of using Retrieval-Augmented Generation or RAG as a way of using Large Language Models to interact, summarize, and answer questions about a set of texts. In my work in technology and learning at Harvard Business School we have been indexing the textual elements of our active, social, case-based online business courses to create course assistant chatbots and interactive teaching elements.</p>
<p>The basic gist of RAG is to divide up the source text into a set of chunks that are then indexed using vector embeddings, creating a numeric vector for each textual chunk that represents (at some level) the semantics of the text. The chunks and associated This database can then be used to find a set of documents related to a query or conversation that can be passed as context to a Large Language Model (LLM) to synthesize an answer.</p>
<p>The advantage of using RAG compared to using an LLM like ChatGPT without RAG, is that it focuses the conversation directly on the text, minimizes bias and hallucinations, and also provides the ability to show direct references and links to the textual chunks used to create the LLM response. The current architecture of LLMs does not allow them to provide direct references to source materials.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://brentwbenson.org/posts/lord-of-the-rings/conversational_retrieval_chain.png" class="img-fluid figure-img"></p>
<figcaption>An illustration of the data flow in the converational-retrieval chain.</figcaption>
</figure>
</div>
</section>
<section id="indexing-the-text-of-the-lord-of-the-rings" class="level2">
<h2 class="anchored" data-anchor-id="indexing-the-text-of-the-lord-of-the-rings">Indexing the text of <em>The Lord of the Rings</em></h2>
<p>I used an ePub version of <em>The Lord of the Rings</em> that included all three volumes and 6 books along with appendices. The custom chunking cusprogram (see Appendix) produces a <code>JSONL</code> file with each line containing a chunk of text and associated metadata like this:</p>
<pre class="{json}"><code>{"class": "appendix",
 "id": "appe-1",
 "index": 991,
 "label": "APPENDIX A: ANNALS OF THE KINGS AND RULERS",
 "page": "page1071",
 "playorder": "79",
 "source": "LordoftheRings_appe-1.html",
 "text": ".\n"
         "After the fall of Sauron, Gimli brought south a part of the "
         "Dwarf-folk of Erebor, and he became Lord of the Glittering Caves.\r\n"
         "         He and his people did great works in Gondor and Rohan. For "
         "Minas Tirith they forged gates of mithril and steel to replace those "
         "broken by the Witch-king. Legolas his friend also brought south "
         "Elves out of Greenwood, and they\r\n"
         "         dwelt in Ithilien, and it became once again the fairest "
         "country in all the westlands.\n"
         "But when King Elessar gave up his life Legolas followed at last the "
         "desire of his heart and sailed over Sea.",
 "title": "The Lord of the Rings"}</code></pre>
</section>
<section id="other-things-to-try" class="level2">
<h2 class="anchored" data-anchor-id="other-things-to-try">Other things to try</h2>
<ul>
<li><p>It would definitely make sense to add <em>The Hobbit</em> and <em>The Silmarillion</em> to the system to allow for a broader range of questions.</p></li>
<li><p>The use of a multi-modal embedding model would allow for indexing the maps of books as images, which might add interesting capabilities.</p></li>
<li><p>It would be useful to be able to do broader RAG searches to the end of creating different types of summarizations across topics, characters, or family lines.</p></li>
</ul>
</section>
<section id="sec-chunking" class="level2">
<h2 class="anchored" data-anchor-id="sec-chunking">Appendix: Custom chunking program</h2>
<div id="bf0f994c" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jsonlines</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> groupby</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> itemgetter</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> ebooklib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> epub, ITEM_DOCUMENT, ITEM_NAVIGATION</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> langchain_text_splitters <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RecursiveCharacterTextSplitter</span>
<span id="cb2-7"></span>
<span id="cb2-8">MAX_CHUNK_CHARS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> main():</span>
<span id="cb2-11">    epub_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The_Lord_of_the_Rings.epub"</span></span>
<span id="cb2-12">    jsonl_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The_Lord_of_the_Rings.jsonl"</span></span>
<span id="cb2-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Process </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epub_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb2-14">    chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epub_text(epub_file)</span>
<span id="cb2-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Identified </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(chunks)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> textual elements."</span>)</span>
<span id="cb2-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ix, chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(chunks):</span>
<span id="cb2-17">        chunk[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"index"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ix</span>
<span id="cb2-18">        chunk[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The Lord of the Rings"</span></span>
<span id="cb2-19">        vol_book <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path_to_volume_book(chunk[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>])</span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> vol_book:</span>
<span id="cb2-21">            chunk.update(vol_book)</span>
<span id="cb2-22">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> chunk[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>]</span>
<span id="cb2-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Writing </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>jsonl_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb2-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> jsonlines.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(jsonl_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> out_file:</span>
<span id="cb2-25">        out_file.write_all(chunks)</span>
<span id="cb2-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Done."</span>)</span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> epub_text(epub_file):</span>
<span id="cb2-29">    book <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> epub.read_epub(epub_file)</span>
<span id="cb2-30">    toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table_of_contents(book)</span>
<span id="cb2-31">    contents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> source <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> toc:</span>
<span id="cb2-33">        node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> toc[source]</span>
<span id="cb2-34">        item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> book.get_item_with_href(source)</span>
<span id="cb2-35">        chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chapter_contents(item, node)</span>
<span id="cb2-36">        page_chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coalesce_pages(chunks)</span>
<span id="cb2-37">        contents.extend(page_chunks)</span>
<span id="cb2-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> contents</span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> table_of_contents(book):</span>
<span id="cb2-41">    nav_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> book.get_items_of_type(ITEM_NAVIGATION)</span>
<span id="cb2-42">    nav_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(nav_items)</span>
<span id="cb2-43">    ncx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(nav_item.get_content(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb2-44">    np_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> np <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> ncx.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"navmap"</span>).find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"navpoint"</span>, recursive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb2-46">        nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_navpoint(np)</span>
<span id="cb2-47">        np_nodes.extend(nodes)</span>
<span id="cb2-48">    toc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb2-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np_nodes:</span>
<span id="cb2-50">        toc[node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb2-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> toc</span>
<span id="cb2-52"></span>
<span id="cb2-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> process_navpoint(navpoint, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb2-54">    node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-55">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"source"</span>: navpoint.content[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"src"</span>],</span>
<span id="cb2-56">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: navpoint.find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"navlabel"</span>).get_text().strip(),</span>
<span id="cb2-57">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"path"</span>: path,</span>
<span id="cb2-58">    }</span>
<span id="cb2-59">    node.update(attr_values(navpoint.attrs))</span>
<span id="cb2-60">    child_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [node[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>]]</span>
<span id="cb2-61">    nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [node]</span>
<span id="cb2-62">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> child_np <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> navpoint.find_all(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"navpoint"</span>, recursive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb2-63">        child_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> process_navpoint(child_np, child_path)</span>
<span id="cb2-64">        nodes.extend(child_nodes)</span>
<span id="cb2-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> nodes</span>
<span id="cb2-66"></span>
<span id="cb2-67"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> attr_values(attrs):</span>
<span id="cb2-68">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Book-specific interpretation of TOC attributes"</span></span>
<span id="cb2-69">    vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-70">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>: attrs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class"</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-71">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>: attrs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>],</span>
<span id="cb2-72">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"playorder"</span>: attrs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"playorder"</span>],</span>
<span id="cb2-73">    }</span>
<span id="cb2-74">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vals</span>
<span id="cb2-75"></span>
<span id="cb2-76"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> chapter_contents(item, node):</span>
<span id="cb2-77">    chapter_chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-78">    soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(item.get_body_content(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"html.parser"</span>)</span>
<span id="cb2-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over every tag</span></span>
<span id="cb2-80">    page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span></span>
<span id="cb2-81">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> soup.div:</span>
<span id="cb2-82">        root_tag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.div</span>
<span id="cb2-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-84">        root_tag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup</span>
<span id="cb2-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> tag <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> root_tag.find_all(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, recursive<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb2-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ((tag.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb2-87">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tag.attrs) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span></span>
<span id="cb2-88">            tag[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>].startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page"</span>)):</span>
<span id="cb2-89">            page <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tag[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>]</span>
<span id="cb2-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-91">            chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-92">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: tag.get_text().strip(),</span>
<span id="cb2-93">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page"</span>: page,</span>
<span id="cb2-94">            }</span>
<span id="cb2-95">            chunk.update(node)</span>
<span id="cb2-96">            chapter_chunks.append(chunk)</span>
<span id="cb2-97">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> chapter_chunks</span>
<span id="cb2-98"></span>
<span id="cb2-99"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> coalesce_pages(chunks):</span>
<span id="cb2-100">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Combine the texts of items that share the same page."""</span></span>
<span id="cb2-101">    keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"page"</span>]</span>
<span id="cb2-102">    key_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> itemgetter(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>keys)</span>
<span id="cb2-103">    text_splitter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RecursiveCharacterTextSplitter(</span>
<span id="cb2-104">        chunk_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MAX_CHUNK_CHARS,</span>
<span id="cb2-105">        chunk_overlap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb2-106">        separators <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>], </span>
<span id="cb2-107">    )</span>
<span id="cb2-108">    page_chunks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-109">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> page_key, page_iter <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> groupby(chunks, key_func):</span>
<span id="cb2-110">        chunk_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [pi <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> page_iter]</span>
<span id="cb2-111">        page_chunk_proto <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunk_nodes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-112">        page_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(pi[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> chunk_nodes)</span>
<span id="cb2-113">        page_texts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text_splitter.split_text(page_text)</span>
<span id="cb2-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> text <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> page_texts:</span>
<span id="cb2-115">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> text:</span>
<span id="cb2-116">                page_chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> page_chunk_proto.copy()</span>
<span id="cb2-117">                page_chunk[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> text</span>
<span id="cb2-118">                page_chunks.append(page_chunk)</span>
<span id="cb2-119">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> page_chunks</span>
<span id="cb2-120">    </span>
<span id="cb2-121"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> path_to_volume_book(path):</span>
<span id="cb2-122">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">match</span> path:</span>
<span id="cb2-123">        case []:</span>
<span id="cb2-124">            vol_book <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-125">        case [volume]:</span>
<span id="cb2-126">            vol_book <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"volume"</span>: volume.title()}</span>
<span id="cb2-127">        case [volume, book]:</span>
<span id="cb2-128">            vol_book <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-129">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"volume"</span>: volume.title(),</span>
<span id="cb2-130">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"book"</span>: book.title(),</span>
<span id="cb2-131">            }</span>
<span id="cb2-132">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vol_book</span>
<span id="cb2-133"></span>
<span id="cb2-134"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-135">    main()</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>technology</category>
  <category>ai</category>
  <category>books</category>
  <guid>https://brentwbenson.org/posts/lord-of-the-rings/</guid>
  <pubDate>Thu, 04 Jul 2024 04:00:00 GMT</pubDate>
  <media:content url="https://brentwbenson.org/posts/lord-of-the-rings/lotr_q_and_a.png" medium="image" type="image/png" height="159" width="144"/>
</item>
</channel>
</rss>
